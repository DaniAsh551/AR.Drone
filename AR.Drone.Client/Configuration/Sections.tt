<#@ template language="C#v3.5" #>

using System;
using System.Collections.Concurrent;
using System.Collections.Generic;
using System.Runtime.InteropServices;

namespace AR.Drone.Client.Configuration
{
<#
	BS("GeneralSection", "general");
	RO("ConfigVersion", "num_version_config", "Int32");
    RO("MotherboardVersion", "num_version_mb", "Int32");
    RO("SoftVersion", "num_version_soft", "String");
    RO("DroneSerial", "drone_serial", "String");
    RO("SoftBuildDate", "soft_build_date", "String");
    RO("Motor1Soft", "motor1_soft", "String");
    RO("Motor1Hard", "motor1_hard", "String");
    RO("Motor1Supplier", "motor1_supplier", "String");
    RO("Motor2Soft", "motor2_soft", "String");
    RO("Motor2Hard", "motor2_hard", "String");
    RO("Motor2Supplier", "motor2_supplier", "String");
    RO("Motor3Soft", "motor3_soft", "String");
    RO("Motor3Hard", "motor3_hard", "String");
    RO("Motor3Supplier", "motor3_supplier", "String");
    RO("Motor4Soft", "motor4_soft", "String");
    RO("Motor4Hard", "motor4_hard", "String");
    RO("Motor4Supplier", "motor4_supplier", "String");
    RW("ARDroneName", "ardrone_name", "String");
    RO("FlyingTime", "flying_time", "Int32");
    RW("NavdataDemo", "navdata_demo", "Boolean");
    RW("NavdataOptions", "navdata_options", "Int32");
    RW("ComWatchdog", "com_watchdog", "Int32");
    RW("Video", "video_enable", "Boolean");
    RW("Vision", "vision_enable", "Boolean");
    RW("BatteryVoltageMin", "vbat_min", "Int32");
    RW("LocalTime", "localtime", "Int32");
    ES();
    
    BS("ControlSection", "control");
	RO("accs_offset", "accs_offset", "String");
	RO("accs_gains", "accs_gains", "String");
	RO("gyros_offset", "gyros_offset", "String");
	RO("gyros_gains", "gyros_gains", "String");
	RO("gyros110_offset", "gyros110_offset", "String");
	RO("gyros110_gains", "gyros110_gains", "String");
	RO("magneto_offset", "magneto_offset", "String");
	RO("magneto_radius", "magneto_radius", "Single");
	RO("gyro_offset_thr_x", "gyro_offset_thr_x", "Single");
	RO("gyro_offset_thr_y", "gyro_offset_thr_y", "Single");
	RO("gyro_offset_thr_z", "gyro_offset_thr_z", "Single");
	RO("pwm_ref_gyros", "pwm_ref_gyros", "Int32");
	RO("osctun_value", "osctun_value", "Int32");
	RO("osctun_test", "osctun_test", "Boolean");
	RW("control_level", "control_level", "Int32");
	RW("euler_angle_max", "euler_angle_max", "Single");
	RW("altitude_max", "altitude_max", "Int32");
	RW("altitude_min", "altitude_min", "Int32");
	RW("control_iphone_tilt", "control_iphone_tilt", "Single");
	RW("control_vz_max", "control_vz_max", "Single");
	RW("control_yaw", "control_yaw", "Single");
	RW("outdoor", "outdoor", "Boolean");
	RW("flight_without_shell", "flight_without_shell", "Boolean");
	RO("autonomous_flight", "autonomous_flight", "Boolean"); // obsolete
	RW("manual_trim", "manual_trim", "Boolean");
	RW("indoor_euler_angle_max", "indoor_euler_angle_max", "Single");
	RW("indoor_control_vz_max", "indoor_control_vz_max", "Single");
	RW("indoor_control_yaw", "indoor_control_yaw", "Single");
	RW("outdoor_euler_angle_max", "outdoor_euler_angle_max", "Single");
	RW("outdoor_control_vz_max", "outdoor_control_vz_max", "Single");
	RW("outdoor_control_yaw", "outdoor_control_yaw", "Single");
	RW("flying_mode", "flying_mode", "Int32");
	RW("hovering_range", "hovering_range", "Int32");
	// TODO !!!
	//RW("flight_anim", "flight_anim", "FlightAnimationItem");
    ES();
    
	BS("NetworkSection", "network");
	RW("SsidSinglePlayer", "ssid_single_player", "String");
	RW("SsidMultiPlayer", "ssid_multi_player", "String");
	RW("WifiMode", "wifi_mode", "Int32");
	RW("WifiRate", "wifi_rate", "Int32");
	RW("OwnerMac", "owner_mac", "String");
	ES();

	BS("PicSection", "pic");
	RW("UltrasoundFreq", "ultrasound_freq", "Int32");
	RW("UltrasoundWatchdog", "ultrasound_watchdog", "Int32");
	RO("Version", "pic_version", "Int32");
	ES();

	BS("VideoSection", "video");
	RO("CamifFps", "camif_fps", "Int32");
	RW("CodecFps", "codec_fps", "Int32");
	RO("CamifBuffers", "camif_buffers", "Int32");
	RO("Trackers", "num_trackers", "Int32");
	RWE("Codec", "video_codec", "VideoCodecType");
	RW("Slices", "video_slices", "Int32");
	RW("LiveSocket", "video_live_socket", "Int32");
	RO("StorageSpace", "video_storage_space", "Int32");
	RW("Bitrate", "bitrate", "Int32");
	RW("MaxBitrate", "max_bitrate", "Int32");
	RWE("BitrateCtrlMode", "bitrate_ctrl_mode", "VideoBitrateControlMode");
	RW("BitrateStorage", "bitrate_storage", "Int32");
	RWE("Channel", "video_channel", "VideoChannelType");
	RW("OnUsb", "video_on_usb", "Boolean");
	RW("FileIndex", "video_file_index", "Int32");
	ES();

	BS("LedsSection", "leds");
	RW("Animation", "leds_anim", "String");
	ES();

	BS("DetectSection", "detect");
	RW("EnemyColors", "enemy_colors", "Int32");
	RW("GroundstripeColors", "groundstripe_colors", "Int32");
	RW("EnemyWithoutShell", "enemy_without_shell", "Int32");
	RW("DetectType", "detect_type", "Int32");
	RW("DetectionsSelectH", "detections_select_h", "Int32");
	RW("DetectionsSelectVHsync", "detections_select_v_hsync", "Int32");
	RW("DetectionsSelectV", "detections_select_v", "Int32");
	ES();

	BS("SyslogSection", "syslog");
	RW("Output", "output", "Int32");
	RW("MaxSize", "max_size", "Int32");
	RW("NbFiles", "nb_files", "Int32");
	ES();

	BS("UserboxSection", "userbox");
	RW("UserboxCmd", "userbox_cmd", "String");
	ES();

	BS("GpsSection", "gps");
	RO("Latitude", "latitude", "Double");
	RO("Longitude", "longitude", "Double");
	RO("Altitude", "altitude", "Double");
	ES();

	BS("CustomSection", "custom");
	RW("ApplicationId", "application_id", "String");
	RW("ApplicationDescription", "application_desc", "String");
	RW("ProfileId", "profile_id", "String");
	RW("ProfileDescription", "profile_desc", "String");
	RW("SessionId", "session_id", "String");
	RW("SessionDescription", "session_desc", "String");
	ES();
#>
}
<#+
	private void BS(string className, string sectionName)
	{
		this.WriteLine(string.Empty);
		this.PushIndent("\t");
		this.WriteLine("public class " + className + " : SectionBase");
		this.WriteLine("{");
		this.PushIndent("\t");
		
		this.WriteLine("public {0}(DroneConfiguration configuration) : base(configuration, \"{1}\") {{}}", className, sectionName);
	}
	
	private void ES()
	{
		this.PopIndent();
		this.WriteLine("}");
		this.PopIndent();
	}
	
	private void RO(string propertyName, string keyName, string typeName)
	{
		this.WriteLine(string.Empty);
		this.WriteLine("public {0} {1}", typeName, propertyName);
		this.WriteLine("{");
		this.PushIndent("\t");
		this.WriteLine("get {{ return Get{0}(\"{1}\"); }}", typeName, keyName);
		this.PopIndent();
		this.WriteLine("}");
	}
	
	private void RW(string propertyName, string keyName, string typeName)
	{
		this.WriteLine(string.Empty);
		this.WriteLine("public {0} {1}", typeName, propertyName);
		this.WriteLine("{");
		this.PushIndent("\t");
		this.WriteLine("get {{ return Get{0}(\"{1}\"); }}", typeName, keyName);
		this.WriteLine("set {{ Set(\"{0}\", value); }}", keyName);
		this.PopIndent();
		this.WriteLine("}");
	}
	
	private void RWE(string propertyName, string keyName, string typeName)
	{
		this.WriteLine(string.Empty);
		this.WriteLine("public {0} {1}", typeName, propertyName);
		this.WriteLine("{");
		this.PushIndent("\t");
		this.WriteLine("get {{ return GetEnum<{0}>(\"{1}\"); }}", typeName, keyName);
		this.WriteLine("set {{ SetEnum<{0}>(\"{1}\", value); }}", typeName, keyName);
		this.PopIndent();
		this.WriteLine("}");
	}
#>